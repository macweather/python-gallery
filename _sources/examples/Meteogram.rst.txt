

.. _sphx_glr_examples_Meteogram.py:


=================
Surface Meteogram
=================

Plot a surface meteogram from METAR data available on the Unidata Thredds Server.

Plot a four panel meteogram and use MetPy calculations to calculate or modify
some variables.


Import appropriate libraries



.. code-block:: python

    from datetime import datetime, timedelta

    from matplotlib.dates import AutoDateLocator, DateFormatter
    import matplotlib.pyplot as plt
    import metpy.calc as mpcalc
    from metpy.units import units
    from siphon.catalog import TDSCatalog
    from siphon.ncss import NCSS







Begin Data Ingest
-----------------



.. code-block:: python


    # Request METAR data from TDS
    metar = TDSCatalog('http://thredds.ucar.edu/thredds/catalog/nws/metar/ncdecoded/catalog.xml')
    dataset = list(metar.datasets.values())[0]
    print(list(dataset.access_urls))





.. rst-class:: sphx-glr-script-out

 Out::

    ['NetcdfSubset']


What variables are available in dataset?



.. code-block:: python


    # Access netcdf subset and use siphon to request data
    ncss_url = dataset.access_urls['NetcdfSubset']
    ncss = NCSS(ncss_url)
    print(ncss.variables)





.. rst-class:: sphx-glr-script-out

 Out::

    {'hectoPascal_ALTIM', 'dew_point_temperature', 'report_id', 'wind_peak_from_direction', 'cloud_area_fraction', 'inches_ALTIM', 'low_cloud_base_altitude', 'wind_peak_speed', 'snowfall_amount', 'wind_from_direction', 'high_cloud_area_fraction', 'wind_speed', 'high_cloud_base_altitude', 'report', 'weather', 'middle_cloud_base_altitude', 'wind_from_direction_min', 'snowfall_amount_last_hour', 'air_temperature', 'middle_cloud_area_fraction', 'precipitation_amount_24', 'wind_gust', 'report_length', 'wind_peak_time', 'visibility_in_air_direction', 'air_pressure_at_sea_level', 'wind_from_direction_max', 'xfields', 'visibility_in_air', 'visibility_in_air_vertical', 'low_cloud_area_fraction', 'visibility_in_air_surface', 'numChildren', 'precipitation_amount_hourly'}


Set query to get desired data from Thredds server



.. code-block:: python


    # get current date and time
    now = datetime.utcnow()
    now = datetime(now.year, now.month, now.day, now.hour)

    # define time range you want the data for
    start = now - timedelta(days=1)
    end = now

    # build the query
    query = ncss.query()
    query.lonlat_point(-90.08, 32.32)
    query.time_range(start, end)
    query.variables('air_temperature', 'dew_point_temperature', 'wind_speed',
                    'precipitation_amount_hourly', 'inches_ALTIM',
                    'air_pressure_at_sea_level', 'wind_from_direction')
    query.accept('netcdf')

    # Get the netcdf dataset
    data = ncss.get_data(query)
    print(list(data.variables))





.. rst-class:: sphx-glr-script-out

 Out::

    ['latitude', 'longitude', 'stationAltitude', 'station_id', 'station_description', 'wmo_id', 'time', 'stationIndex', 'wind_from_direction', 'wind_speed', 'air_temperature', 'dew_point_temperature', 'inches_ALTIM', 'air_pressure_at_sea_level', 'precipitation_amount_hourly']


Begin parsing out information from file including data



.. code-block:: python


    # Get the station ID
    station_id = data['station_id'][:].tostring()
    station_id = station_id.decode('utf-8')
    print(station_id)

    # Get time into a datetime object
    time = [datetime.fromtimestamp(t) for t in data['time']]
    time = sorted(time)
    print(time)

    temp = data.variables['air_temperature'][:] * units('degC')
    dewp = data.variables['dew_point_temperature'][:] * units('degC')
    slp = data.variables['inches_ALTIM'][:] * units('inHg')
    wspd = data.variables['wind_speed'][:] * units('m/s')
    wdir = data.variables['wind_from_direction'][:] * units('degree')





.. rst-class:: sphx-glr-script-out

 Out::

    JAN
    [datetime.datetime(2017, 12, 18, 15, 27), datetime.datetime(2017, 12, 18, 15, 47), datetime.datetime(2017, 12, 18, 16, 9), datetime.datetime(2017, 12, 18, 17, 30), datetime.datetime(2017, 12, 18, 17, 30), datetime.datetime(2017, 12, 18, 18, 41), datetime.datetime(2017, 12, 18, 19, 37), datetime.datetime(2017, 12, 19, 0, 9), datetime.datetime(2017, 12, 19, 2, 43), datetime.datetime(2017, 12, 19, 4, 3), datetime.datetime(2017, 12, 19, 5, 3), datetime.datetime(2017, 12, 19, 5, 23), datetime.datetime(2017, 12, 19, 5, 38), datetime.datetime(2017, 12, 19, 6, 43), datetime.datetime(2017, 12, 19, 7, 16), datetime.datetime(2017, 12, 19, 8, 17), datetime.datetime(2017, 12, 19, 9, 1), datetime.datetime(2017, 12, 19, 9, 21), datetime.datetime(2017, 12, 19, 10, 43), datetime.datetime(2017, 12, 19, 11, 47), datetime.datetime(2017, 12, 19, 12, 27), datetime.datetime(2017, 12, 19, 12, 46), datetime.datetime(2017, 12, 19, 13, 38), datetime.datetime(2017, 12, 19, 14, 3), datetime.datetime(2017, 12, 19, 14, 3), datetime.datetime(2017, 12, 19, 14, 13)]


Use MetPy Calculations to calculate RH
--------------------------------------



.. code-block:: python


    # Get ambient partial pressure, use to calculate mixing ratio
    es = mpcalc.saturation_vapor_pressure(dewp)
    mixr = mpcalc.mixing_ratio(es, slp)

    # Calculate vapor pressure
    vp = mpcalc.vapor_pressure(slp, mixr)

    # Calculate saturation vapor pressure
    svp = mpcalc.saturation_vapor_pressure(temp)

    # Calculate relative humidity as a percentage
    rh = (vp / svp) * 100








Make Meteogram Plot
-------------------



.. code-block:: python


    # Create the plots
    fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, sharex=True, figsize=(12, 10))
    ax1.plot(time, temp, ls='solid', marker='o', color='tab:red', ms=5)
    ax1.plot(time, dewp, ls='solid', color='tab:green', marker='*', ms=8)
    ax1.fill_between(time, dewp.min().m-5, dewp.m, color='tab:green', alpha=0.5)
    ax1.fill_between(time, dewp.m, temp.m, color='tab:red', alpha=0.5)
    ax1.set_ylabel(r'$Temp\/(^oC)$''\n'r'$Dew\/Point\/Temp\/(^oC)$', fontsize=12)
    ax1.grid(True)

    ax2.bar(time, wspd, width=.01, align='center', color='skyblue')
    ax2.set_ylabel(r'$Wind\/Speed\/(m/s)$', fontsize=12)
    ax2b = ax2.twinx()
    ax2b.plot(time, wdir, marker='d', ls='None')
    ax2b.set_ylim(-20, 360)
    ax2b.set_ylabel(r'$Wind\ Dir\/(^{o})$')
    ax2.grid(True)

    ax3.plot(time, rh, color='darkgreen', marker='^')
    ax3.set_ylabel(r'$Relative\/Humidity\/(\%)$', fontsize=12)
    ax3.fill_between(time, 0, rh, color='palegreen')
    ax3.set_ylim(0, 100)
    ax3.grid(True)

    ax4.plot(time, slp, ls='--', color='brown', lw=3)
    ax4.set_ylabel(r'$Pressure\/(in-Hg)$')
    ax4.grid(True)

    locator = AutoDateLocator()
    fmt = DateFormatter('%H:%M')

    ax1.xaxis.set_major_locator(locator)
    ax1.xaxis.set_major_formatter(fmt)
    ax1.autoscale_view()
    ax1.set_title('Site: {}     Date: {:%Y/%m/%d}'.format(station_id, time[0]), fontsize=16)
    ax4.set_xlabel(r'$Hour\/of\/day$', fontsize=14)
    fig.autofmt_xdate()
    plt.show()



.. image:: /examples/images/sphx_glr_Meteogram_001.png
    :align: center




**Total running time of the script:** ( 0 minutes  5.636 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: Meteogram.py <Meteogram.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: Meteogram.ipynb <Meteogram.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
